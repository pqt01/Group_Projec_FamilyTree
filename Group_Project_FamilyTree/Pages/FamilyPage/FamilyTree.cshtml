@page
@using Microsoft.AspNetCore.Html;
@model Group_Project_FamilyTree.Pages.FamilyPage.FamilyTreeModel
@{
	int a = Model.MemberId;
}
<p>
	<a asp-page="./ListMember" class="btn btn-sm btn-primary">Back to list</a>
	<a asp-page="Create" class="btn btn-sm btn-success">Add member</a>
</p>

<script src="https://balkan.app/js/orgchart.js"></script>
<style>
	html, body {
		margin: 0px;
		padding: 0px;
		width: 100%;
		height: 100%;
		overflow: hidden;
		font-family: Helvetica;
	}

	[data-n-id='@(a)'] rect {
		fill: #00B8EA;
	}

	[data-n-id='@(a)'] text {
		fill: #fff;
	}

	#tree {
		width: 100%;
		height: 100%;
	}
</style>
<div style="width:100%; height:700px;" id="tree"></div>
<script>
	new Promise(res => {
		OrgChart.templates.group.link = '<path stroke-linejoin="round" stroke="#aeaeae" stroke-width="1px" fill="none" d="M{xa},{ya} {xb},{yb} {xc},{yc} L{xd},{yd}" />';
		OrgChart.templates.group.nodeMenuButton = '';
		OrgChart.templates.group.min = Object.assign({}, OrgChart.templates.group);
		OrgChart.templates.group.min.imgs = "{val}";
		OrgChart.templates.group.min.img_0 = "";
		OrgChart.templates.group.min.description = '<text data-width="230" data-text-overflow="multiline" style="font-size: 14px;" fill="#aeaeae" x="125" y="100" text-anchor="middle">{val}</text>';


		var chart = new OrgChart(document.getElementById("tree"), {
			mouseScrool: OrgChart.none,
			template: "olivia",
			enableDragDrop: false,
			enableSearch: false,
			nodeMouseClick: OrgChart.action.edit,
			nodeMenu: {
				details: { text: "Details" },
			},
			nodeBinding: {
				imgs: "img",
				description: "description",
				field_0: "name",
				field_1: "birthday",
				img_0: "img",

			},
			tags: {
				"group": {
					template: "group",
				},
				"devs-group": {
					subTreeConfig: {
						columns: 2
					}
				},
				"sales-group": {
					subTreeConfig: {
						columns: 1
					}
				},
				"hrs-group": {
					min: true,
					subTreeConfig: {
						columns: 2
					}
				},
			}
		});

		chart.on('drop', function (sender, draggedNodeId, droppedNodeId) {
			var draggedNode = sender.getNode(draggedNodeId);
			var droppedNode = sender.getNode(droppedNodeId);

			if (droppedNode.tags.indexOf("group") != -1 && draggedNode.tags.indexOf("group") == -1) {
				var draggedNodeData = sender.get(draggedNode.id);
				draggedNodeData.pid = null;
				draggedNodeData.stpid = droppedNode.id;
				sender.updateNode(draggedNodeData);
				return false;
			}
		});

		chart.on('click', function (sender, args) {
			if (args.node.tags.indexOf("group") != -1) {
				if (args.node.min) {
					sender.maximize(args.node.id);
				}
				else {
					sender.minimize(args.node.id);
				}
			}
			return false;
		});

		chart.on('field', function (sender, args) {
			if (args.node.min) {
				if (args.name == "img") {
					var count = args.node.stChildrenIds.length > 5 ? 5 : args.node.stChildrenIds.length;
					var x = args.node.w / 2 - (count * 32) / 2;
					for (var i = 0; i < count; i++) {
						var data = sender.get(args.node.stChildrenIds[i]);
						args.value += '<image xlink:href="' + data.img + '" x="' + (x + i * 32) + '" y="45" width="32" height="32" ></image>';
					}
				}
			}
		});
		var a = @Html.Raw(Json.Serialize(@Model.ListItems));
		console.log(a);
		chart.load(a);
	})
</script>